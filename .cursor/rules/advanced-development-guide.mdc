---
alwaysApply: false
description: 심화 개발 가이드 - 아키텍처, 리팩토링, 테스트 작성 상세 가이드
---

# 심화 개발 가이드

이 규칙은 복잡한 기능 구현, 리팩토링, 대규모 테스트 작성 시 참고하세요.

## 상세 아키텍처 가이드

### Custom Hook 작성 규칙

**언제 Hook을 만들어야 하나?**

1. 상태 관리가 필요한 경우
2. 여러 컴포넌트에서 재사용되는 로직
3. 부수 효과(useEffect)가 필요한 경우
4. 복잡한 비즈니스 로직 분리

**Hook 작성 패턴:**

```typescript
// 나쁜 예 - 너무 많은 책임
export const useSomething = () => {
  // 30개 이상의 상태와 로직...
};

// 좋은 예 - 단일 책임
export const useEventForm = (initialEvent?: Event) => {
  // 폼 상태만 관리
  const [title, setTitle] = useState(initialEvent?.title || '');
  const [date, setDate] = useState(initialEvent?.date || '');

  return { title, setTitle, date, setDate, ... };
};

export const useEventOperations = (editing: boolean, onSave?: () => void) => {
  // API 통신만 담당
  const saveEvent = async (eventData: Event | EventForm) => { ... };
  const deleteEvent = async (id: string) => { ... };

  return { events, saveEvent, deleteEvent };
};
```

### Utils 함수 작성 규칙

**순수 함수 원칙:**

- 외부 상태에 의존하지 않음
- 동일 입력 → 동일 출력
- 부수 효과 없음 (API 호출, DOM 조작 금지)

```typescript
// 좋은 예 - 순수 함수
export function formatDate(currentDate: Date, day?: number): string {
  return [
    currentDate.getFullYear(),
    fillZero(currentDate.getMonth() + 1),
    fillZero(day ?? currentDate.getDate()),
  ].join('-');
}

// 나쁜 예 - 순수하지 않음 (외부 API 호출)
export function fetchAndFormatDate(): string {
  const response = fetch('/api/date'); // ❌ 부수 효과
  return formatResponse(response);
}
```

**함수 분해 원칙:**

- 하나의 함수는 하나의 일만 수행
- 10줄 이하로 유지 권장
- 복잡한 로직은 하위 함수로 분리

참고: [src/utils/eventUtils.ts](mdc:src/utils/eventUtils.ts)

### 타입 설계 패턴

**Event vs EventForm 구분:**

```typescript
// Form용 타입 (id 없음)
export interface EventForm {
  title: string;
  date: string;
  // ...
}

// 저장된 이벤트 (id 있음)
export interface Event extends EventForm {
  id: string;
}
```

**Union Type으로 상태 표현:**

```typescript
type ViewType = 'week' | 'month'; // ✅ 명확한 값 제한
type Status = string; // ❌ 너무 광범위
```

## 테스트 작성 가이드

### 테스트 난이도 분류 기준

**Easy (easy.\*.spec.ts):**

- 순수 함수 테스트
- 입력/출력이 명확
- 외부 의존성 없음
- 예: `dateUtils`, `timeValidation`

**Medium (medium.\*.spec.ts):**

- API 통신 포함
- 복잡한 상태 관리
- 여러 컴포넌트/훅 통합
- 예: `useEventOperations`, `integration.spec.tsx`

### 테스트 작성 패턴

**AAA 패턴 (Arrange-Act-Assert):**

```typescript
it('일정이 올바르게 저장된다', async () => {
  // Arrange - 준비
  const mockEvent = { title: '회의', date: '2025-10-15', ... };

  // Act - 실행
  const { result } = renderHook(() => useEventOperations(false));
  await act(async () => {
    await result.current.saveEvent(mockEvent);
  });

  // Assert - 검증
  expect(result.current.events).toContain(mockEvent);
});
```

**Mock 데이터 관리:**

- [src/**mocks**/response/](mdc:src/__mocks__/response/) 디렉토리에 JSON 파일로 관리
- [src/**mocks**/handlers.ts](mdc:src/__mocks__/handlers.ts)에서 MSW 핸들러 정의

### 테스트 커버리지 목표

- Utils: 100% (순수 함수이므로 쉬움)
- Hooks: 80% 이상
- Integration: 주요 플로우 커버

## 리팩토링 가이드

### App.tsx 컴포넌트 분리 전략

현재 [src/App.tsx](mdc:src/App.tsx)는 661줄로 너무 큽니다. 다음과 같이 분리를 고려하세요:

```
src/
├── components/
│   ├── calendar/
│   │   ├── WeekView.tsx
│   │   ├── MonthView.tsx
│   │   └── CalendarHeader.tsx
│   ├── event/
│   │   ├── EventForm.tsx
│   │   ├── EventList.tsx
│   │   └── EventCard.tsx
│   └── notification/
│       └── NotificationPanel.tsx
└── App.tsx (100줄 이하로 축소)
```

**리팩토링 순서:**

1. 가장 독립적인 부분부터 (NotificationPanel)
2. Props 인터페이스 명확히 정의
3. 기존 테스트가 깨지지 않는지 확인
4. 한 번에 하나씩 분리

### 성능 최적화

**useMemo 사용 시기:**

```typescript
// ✅ 좋은 예 - 복잡한 계산, 의존성 명확
const filteredEvents = useMemo(() => {
  return getFilteredEvents(events, searchTerm, currentDate, view);
}, [events, searchTerm, currentDate, view]);

// ❌ 나쁜 예 - 단순 계산에 불필요
const title = useMemo(() => `제목: ${name}`, [name]);
```

**useCallback 사용 시기:**

- 자식 컴포넌트에 props로 전달되는 함수
- useEffect의 의존성 배열에 들어가는 함수

## API 통신 패턴

### Fetch vs Axios

현재 프로젝트는 native `fetch` 사용. 일관성 유지를 위해 계속 사용하세요.

### API 에러 처리 패턴

```typescript
try {
  const response = await fetch('/api/events');

  // 1. HTTP 상태 체크
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  // 2. JSON 파싱
  const data = await response.json();

  // 3. 데이터 검증
  if (!Array.isArray(data.events)) {
    throw new Error('Invalid response format');
  }

  return data.events;
} catch (error) {
  // 4. 사용자 친화적 에러 메시지
  console.error('Error details:', error);
  enqueueSnackbar('일정을 불러올 수 없습니다.', { variant: 'error' });
  throw error; // 상위에서 처리해야 한다면 re-throw
}
```

### API 엔드포인트 규칙

- GET `/api/events` - 전체 조회
- POST `/api/events` - 생성
- PUT `/api/events/:id` - 수정
- DELETE `/api/events/:id` - 삭제

## 상태 관리 전략

### 언제 전역 상태가 필요한가?

현재는 **로컬 state + props drilling 없음 (hooks로 해결)** 으로 충분합니다.

다음 경우에만 Zustand/Redux 도입 고려:

- 5개 이상의 컴포넌트에서 동일 상태 공유
- 깊은 컴포넌트 트리에서 props drilling 발생
- 복잡한 상태 업데이트 로직 (예: undo/redo)

## 접근성 (A11y) 체크리스트

### 필수 사항

- [ ] 모든 interactive 요소에 `aria-label` 또는 label 텍스트
- [ ] 키보드로 모든 기능 접근 가능
- [ ] 에러 메시지는 스크린 리더가 읽을 수 있게
- [ ] 색상만으로 정보 전달하지 않기

### 현재 프로젝트 적용 예시

```typescript
<IconButton
  aria-label="Edit event"  // ✅ 명확한 설명
  onClick={() => editEvent(event)}
>
  <Edit />
</IconButton>

<Select
  aria-label="뷰 타입 선택"  // ✅ 한글도 OK
  value={view}
  onChange={(e) => setView(e.target.value)}
>
```

## 공휴일 API 확장 가이드

현재는 하드코딩된 공휴일을 사용합니다: [src/apis/fetchHolidays.ts](mdc:src/apis/fetchHolidays.ts)

**실제 API 연동 시:**

1. 공공데이터포털 API 사용 고려
2. 연도별 캐싱 전략 수립
3. API 실패 시 fallback 데이터 준비

```typescript
export async function fetchHolidaysFromAPI(year: number, month: number) {
  try {
    const response = await fetch(`/api/holidays?year=${year}&month=${month}`);
    return await response.json();
  } catch (error) {
    console.warn('Using fallback holidays');
    return getFallbackHolidays(year, month);
  }
}
```

## 배포 전 체크리스트

- [ ] `pnpm lint` 통과
- [ ] `pnpm test` 통과
- [ ] `pnpm build` 성공
- [ ] 주요 플로우 수동 테스트
- [ ] 브라우저 콘솔 에러 없음
- [ ] 접근성 검사 (Lighthouse)
- [ ] 반응형 디자인 확인 (모바일/태블릿)

## 참고 파일

핵심 파일들:

- [src/types.ts](mdc:src/types.ts) - 타입 정의
- [src/hooks/useEventOperations.ts](mdc:src/hooks/useEventOperations.ts) - API 통신 패턴
- [src/utils/dateUtils.ts](mdc:src/utils/dateUtils.ts) - 순수 함수 예시
- [src/**tests**/hooks/easy.useCalendarView.spec.ts](mdc:src/__tests__/hooks/easy.useCalendarView.spec.ts) - 테스트 패턴
